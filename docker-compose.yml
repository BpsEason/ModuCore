version: '3.8'

services:
  # Laravel Backend Service (Octane + Nginx via Supervisor)
  backend:
    build:
      context: ./backend-laravel
      dockerfile: Dockerfile
    container_name: moducore-backend
    ports:
      - "8000:8000" # Expose Octane's internal port directly for development or other services
    volumes:
      - ./backend-laravel:/var/www/html # Mount local backend code
      - ./docker/nginx/default.conf:/etc/nginx/conf.d/default.conf # Mount Nginx config for backend container
      - ./docker/supervisor/supervisord.conf:/etc/supervisor/conf.d/supervisord.conf # Mount Supervisor config
      - ./docker/php-fpm/www.conf:/usr/local/etc/php-fpm.d/www.conf # Mount PHP-FPM config (ensure PHP version matches Dockerfile)
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - moducore_network
    environment:
      - APP_ENV=local
      - APP_DEBUG=true
      - OCTANE_SERVER=swoole # Explicitly define Octane server
      - OCTANE_PORT=8000 # Octane's internal port
      - OCTANE_WORKERS=8 # Number of Octane workers
      - DB_CONNECTION=mysql
      - DB_HOST=db
      - DB_PORT=3306
      - DB_DATABASE=moducore_db
      - DB_USERNAME=moducore_user
      - DB_PASSWORD=moducore_secret
      # Laravel App Key (Should be set in .env)
      - APP_KEY=${APP_KEY}
      # Backend API Key for custom middleware
      - MODUCORE_API_KEY=${MODUCORE_API_KEY}
      # 金流/簡訊配置 (從 .env 傳遞)
      - ECPAY_MERCHANT_ID=${ECPAY_MERCHANT_ID}
      - ECPAY_HASH_KEY=${ECPAY_HASH_KEY}
      - ECPAY_HASH_IV=${ECPAY_HASH_IV}
      - TWILIO_ACCOUNT_SID=${TWILIO_ACCOUNT_SID}
      - TWILIO_AUTH_TOKEN=${TWILIO_AUTH_TOKEN}
      - TWILIO_FROM_PHONE_NUMBER=${TWILIO_FROM_PHONE_NUMBER}
      # Redis 配置 (用於快取和隊列)
      - REDIS_HOST=redis
      - REDIS_PASSWORD=${REDIS_PASSWORD} # If Redis has a password
      - REDIS_PORT=6379
      - CACHE_DRIVER=redis
      - QUEUE_CONNECTION=redis
      - SESSION_DRIVER=redis
      # AI 服務 URL (如果後端需要調用外部 AI 服務)
      - AI_SERVICE_URL=${AI_SERVICE_URL}
      - AI_SERVICE_INTERNAL_API_KEY=${AI_SERVICE_INTERNAL_API_KEY}
    healthcheck: # Health check for Laravel backend (using Nginx proxy internal health endpoint)
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/health"] # Octane listens directly on 8000
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 45s # Give Laravel enough time to start up and run necessary initializations, including Octane
    command: /usr/bin/supervisord -c /etc/supervisor/conf.d/supervisord.conf # Ensure Supervisor starts

  # Redis Service (用於快取、會話、隊列)
  redis:
    image: redis:latest # Using latest for simplicity, alpine is smaller
    container_name: moducore_redis
    ports:
      - "6379:6379" # Map container port 6379 to host port 6379
    volumes:
      - redis_data:/data # Persistent data volume
      - ./docker/redis/redis.conf:/usr/local/etc/redis/redis.conf # Add Redis config for persistence
    networks:
      - moducore_network
    healthcheck: # Health check for Redis
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5
    command: redis-server /usr/local/etc/redis/redis.conf # Run redis with custom config

  # MySQL Database Service
  db:
    build:
      context: ./database # Build context for the database service
      dockerfile: Dockerfile
    container_name: moducore_db
    ports:
      - "3306:3306" # Map container port 3306 to host port 3306
    volumes:
      - db_data:/var/lib/mysql # Persistent data volume
    networks:
      - moducore_network
    environment:
      - MYSQL_ROOT_PASSWORD=root_password
      - MYSQL_DATABASE=moducore_db
      - MYSQL_USER=moducore_user
      - MYSQL_PASSWORD=moducore_secret
    healthcheck: # Health check for MySQL database
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-umoducore_user", "-pmoducore_secret"] # Ping database
      interval: 10s
      timeout: 5s
      retries: 5

networks:
  moducore_network:
    driver: bridge

volumes:
  db_data:
  redis_data:
